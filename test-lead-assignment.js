#!/usr/bin/env node

// –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ª–∏–¥–æ–≤ —á–µ—Ä–µ–∑ AssignmentService
const fetch = require('node-fetch');

const API_URL = 'http://localhost:3000/api';

async function testLeadAssignment() {
  console.log('üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ª–∏–¥–æ–≤...\n');

  try {
    // 1. –õ–æ–≥–∏–Ω
    console.log('1. –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É...');
    const loginResponse = await fetch(`${API_URL}/auth/login`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ username: 'admin', password: 'admin123' })
    });

    const loginData = await loginResponse.json();

    if (!loginResponse.ok) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞:', loginData);
      return;
    }

    console.log('‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω!');
    const token = loginData.access_token;

    // 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ª–∏–¥–∞
    console.log('\n2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ª–∏–¥–∞...');
    const leadData = {
      name: `–¢–µ—Å—Ç–æ–≤—ã–π –ª–∏–¥ ${new Date().toLocaleString()}`,
      email: `test${Date.now()}@example.com`,
      phone: '+7 (999) 123-45-67',
      source: 'website',
      priority: 'high',
      estimatedValue: 50000
    };

    const createLeadResponse = await fetch(`${API_URL}/leads`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify(leadData)
    });

    const leadResponse = await createLeadResponse.json();

    if (!createLeadResponse.ok) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞:', leadResponse);
      return;
    }

    console.log('‚úÖ –õ–∏–¥ —Å–æ–∑–¥–∞–Ω!');
    console.log('üÜî ID –ª–∏–¥–∞:', leadResponse.id);
    const leadId = leadResponse.id;

    // 3. –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ª–∏–¥–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É
    console.log('\n3. –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ª–∏–¥–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É...');
    const assignResponse = await fetch(`${API_URL}/leads/${leadId}/assign`, {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify({ user: '2' }) // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä —Å ID 2 —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    });

    const assignData = await assignResponse.json();

    if (!assignResponse.ok) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ª–∏–¥–∞:', assignData);
      return;
    }

    console.log('‚úÖ –õ–∏–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É!');

    // 4. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π –ª–∏–¥–∞
    console.log('\n4. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π –ª–∏–¥–∞...');
    const assignmentsResponse = await fetch(`${API_URL}/leads/${leadId}/assignments`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });

    const assignmentsData = await assignmentsResponse.json();

    if (!assignmentsResponse.ok) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π:', assignmentsData);
      return;
    }

    console.log('‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã!');
    console.log('üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π:', assignmentsData.length);

    if (assignmentsData.length > 0) {
      const assignment = assignmentsData[0];
      console.log('üìã –î–µ—Ç–∞–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:');
      console.log('   - ID –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:', assignment.id);
      console.log('   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', assignment.userId);
      console.log('   - –°—Ç–∞—Ç—É—Å:', assignment.status);
      console.log('   - –î–∞—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:', new Date(assignment.createdAt).toLocaleString());
    }

    // 5. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ª–∏–¥–æ–≤ –ø–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É
    console.log('\n5. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ª–∏–¥–æ–≤ –ø–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É...');
    const filterResponse = await fetch(`${API_URL}/leads?assignedTo=2&page=1&limit=10`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });

    const filterData = await filterResponse.json();

    if (!filterResponse.ok) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ª–∏–¥–æ–≤:', filterData);
      return;
    }

    console.log('‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!');
    console.log('üìä –ù–∞–π–¥–µ–Ω–æ –ª–∏–¥–æ–≤:', filterData.total);
    console.log('üìÑ –õ–∏–¥–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:', filterData.leads.length);

    // 6. –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–¥–æ–≤ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É
    console.log('\n6. –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–¥–æ–≤ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É...');
    const managerLeadsResponse = await fetch(`${API_URL}/leads/manager/2`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });

    const managerLeadsData = await managerLeadsResponse.json();

    if (!managerLeadsResponse.ok) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:', managerLeadsData);
      return;
    }

    console.log('‚úÖ –õ–∏–¥—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω—ã!');
    console.log('üë§ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤ —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞:', managerLeadsData.length);

    // 7. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ª–∏–¥–∞ –≤ —Å–¥–µ–ª–∫—É
    console.log('\n7. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ª–∏–¥–∞ –≤ —Å–¥–µ–ª–∫—É...');
    const convertResponse = await fetch(`${API_URL}/leads/${leadId}/convert-to-deal`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify({
        amount: 50000,
        expectedCloseDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),
        stageId: '1', // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Å—Ç–∞–¥–∏—è —Å ID 1 —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        notes: '–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏–∑ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ª–∏–¥–∞'
      })
    });

    const convertData = await convertResponse.json();

    if (!convertResponse.ok) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ª–∏–¥–∞:', convertData);
      return;
    }

    console.log('‚úÖ –õ–∏–¥ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ —Å–¥–µ–ª–∫—É!');
    console.log('üÜî ID —Å–¥–µ–ª–∫–∏:', convertData.id);
    console.log('üìã –ù–∞–∑–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏:', convertData.title);

    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ª–∏–¥–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error.message);
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ node-fetch —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
try {
  require('node-fetch');
  testLeadAssignment();
} catch (error) {
  console.log('‚ùå node-fetch –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: npm install node-fetch@2');
  console.log('–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π fetch –≤ –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏—è—Ö Node.js');
}